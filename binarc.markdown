# binarcの仕様

## binarcの概要

binarcは、**汎用的でプラットフォームに依存しないデータ交換のためのバイナリシリアライズ形式**で、木構造で構成された複数の値をシリアライズし、ひとつの書庫（バイト列）として扱います。

### binarcの特長

汎用的でプラットフォームに依存しないデータ交換形式としては、[JSON](http://www.json.org/json-ja.html)や[XML](http://www.techscore.com/tech/XML)、[YAML](http://magazine.rubyist.net/?0009-YAML)、[MessagePack](http://frsyuki.hatenablog.com/entry/20080816/p1)、[Protocol Buffers](http://ja.wikipedia.org/wiki/Protocol_Buffers)などがすでに広まっています。それらに対するbinarcのメリットとしては、以下のような点が挙げられます。

* binarcはバイナリ形式のフォーマットなので、JSONやXML、YAMLなどのテキスト形式のフォーマットと比べて **書庫のサイズが小さく、高速に処理**できます。
* binarcは、 **デシリアライズで動的なメモリ確保を行いません** 。
* binarcは、書庫の中に値のインデックスを持っているので、デシリアライズの際、**書庫の末尾にあるデータまで高速にアクセス**できます。

「**メモリ消費を抑えた高速なデシリアライズ**」が、binarcのコンセプトです。

### binarcの用途

binarcを使用するアプリケーションとしては、主にビデオゲームを想定しています。動的な変更を行わないデータを、アプリケーションが動作する前の開発段階であらかじめシリアライズしておき、アプリケーション動作中の必要な場面で随時デシリアライズして値を取り出す、というような使い方を想定しています。

## binarcの構造

### 値の構造

binarc書庫には、木構造で複数の値が格納されています。格納される値は、以下の3つの要素に分解されます。

* 値の格納形式と格納場所を表す「**値タグ**」
* 値の内容が実際に格納されている「 **値本体**」
* 値の検索に用いる「**値ハッシュ**」

### 値タグ

値タグは、32ビットで構成されます。

- 上位4ビットは、値の格納形式。
- 下位28ビットは、書庫の先頭から値本体へのオフセットワード数（1ワードは4バイト）。

|31　　　　28|27　　　　　　　　　　　　　0|
|:----------:|:---------------------------:|
|値の格納形式|値本体へのオフセットワード数 |

binarcでシリアライズした値の格納形式は、以下のように分類されます。

- スカラー型
  - 真偽値
  - 数値型
    - 符号なし整数型
      - 符号なしイミディエイト整数
      - 符号なし32ビット整数
      - 符号なし64ビット整数
    - 負の整数型
      - 符号つきイミディエイト整数
      - 符号つき32ビット整数
      - 符号つき64ビット整数
    - 浮動小数点型
      - IEEE754単精度浮動小数点数
      - IEEE754倍精度浮動小数点数
  - UTF-8文字列
  - 拡張バイト列
- コンテナ型
  - 配列コンテナ
  - 辞書コンテナ

#### 値の格納形式

格納形式を表す値は、以下のようになっています。

|格納形式                  |値 |
|:-------------------------|--:|
|真偽値                    |0x1|
|UTF-8文字列               |0x2|
|拡張バイト列              |0x3|
|配列コンテナ              |0x4|
|辞書コンテナ              |0x5|
|符号なしイミディエイト整数|0x6|
|符号なし32ビット整数      |0x7|
|符号なし64ビット整数      |0x8|
|符号つきイミディエイト整数|0x9|
|符号つき32ビット整数      |0xa|
|符号つき64ビット整数      |0xb|
|IEEE754単精度浮動小数点数 |0xc|
|IEEE754倍精度浮動小数点数 |0xd|

### 書庫の構造

- 書庫の先頭ワードには、0x494e4478（C言語で記述すると'INDx'）が格納されています。
- 書庫の2ワード目には、木構造の最上位の値タグが格納されています。
- 書庫の先頭は、64ビット境界のメモリ上に配置する必要があります。

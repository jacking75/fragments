# binarcの仕様

## binarcの概要

binarcは、**汎用的でプラットフォームに依存しないデータ交換のためのバイナリシリアライズ形式**で、木構造で構成された複数の値をシリアライズし、ひとつの書庫（バイト列）として扱います。

### binarcの特長

汎用的でプラットフォームに依存しないデータ交換形式としては、[JSON](http://www.json.org/json-ja.html)や[XML](http://www.techscore.com/tech/XML)、[YAML](http://magazine.rubyist.net/?0009-YAML)、[MessagePack](http://frsyuki.hatenablog.com/entry/20080816/p1)、[Protocol Buffers](http://ja.wikipedia.org/wiki/Protocol_Buffers)などがすでに広まっています。それらに対するbinarcのメリットとしては、以下のような点が挙げられます。

* binarcはバイナリ形式のフォーマットなので、JSONやXML、YAMLなどのテキスト形式のフォーマットと比べて **書庫のサイズが小さく、処理も高速**です。
* binarcは、 **デシリアライズで動的なメモリ確保を行いません** 。
* binarcは、書庫の中に値のインデックスを持っているので、デシリアライズの際、**書庫の末尾にあるデータまで高速にアクセス**できます。

「**メモリ消費を抑えた高速なデシリアライズ**」が、binarcのコンセプトです。

### binarcの用途

binarcを使用するアプリケーションとしては、主にビデオゲームを想定しています。動的な変更を行わないデータを、アプリケーションが動作する前の開発段階であらかじめシリアライズしておき、アプリケーション動作中の必要な場面で随時デシリアライズして値を取り出す、というような使い方を想定しています。

## binarcの構造

### 値の構造

binarc書庫には、木構造で複数の値が格納されています。格納される値は、以下の3つの要素に分解されます。

* 値の格納形式と格納場所を表す「**値タグ**」
* 値の内容が実際に格納されている「 **値本体**」
* 値の検索に用いる「**値ハッシュ**」

